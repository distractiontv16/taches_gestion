<?php

namespace Database\Factories;

use App\Models\Task;
use App\Models\User;
use App\Models\Routine;
use Illuminate\Database\Eloquent\Factories\Factory;
use Carbon\Carbon;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Task>
 */
class TaskFactory extends Factory
{
    /**
     * The name of the factory's corresponding model.
     *
     * @var string
     */
    protected $model = Task::class;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'user_id' => User::factory(),
            'assigned_to' => null,
            'routine_id' => null,
            'title' => $this->faker->sentence(4),
            'description' => $this->faker->paragraph(2),
            'due_date' => $this->faker->optional(0.7)->dateTimeBetween('now', '+1 month'),
            'priority' => $this->faker->randomElement(['low', 'medium', 'high']),
            'status' => $this->faker->randomElement(['to_do', 'in_progress', 'completed']),
            'completed_at' => null,
            'is_auto_generated' => false,
            'overdue_notification_sent' => false,
            'generation_date' => null,
            'target_date' => null,
        ];
    }

    /**
     * Indicate that the task is completed.
     */
    public function completed(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'completed',
            'completed_at' => $this->faker->dateTimeBetween('-1 month', 'now'),
        ]);
    }

    /**
     * Indicate that the task is in progress.
     */
    public function inProgress(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'in_progress',
        ]);
    }

    /**
     * Indicate that the task is to do.
     */
    public function toDo(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'to_do',
        ]);
    }

    /**
     * Indicate that the task has high priority.
     */
    public function highPriority(): static
    {
        return $this->state(fn (array $attributes) => [
            'priority' => 'high',
        ]);
    }

    /**
     * Indicate that the task has medium priority.
     */
    public function mediumPriority(): static
    {
        return $this->state(fn (array $attributes) => [
            'priority' => 'medium',
        ]);
    }

    /**
     * Indicate that the task has low priority.
     */
    public function lowPriority(): static
    {
        return $this->state(fn (array $attributes) => [
            'priority' => 'low',
        ]);
    }

    /**
     * Indicate that the task is overdue.
     */
    public function overdue(): static
    {
        return $this->state(fn (array $attributes) => [
            'due_date' => $this->faker->dateTimeBetween('-1 week', '-1 hour'),
            'status' => $this->faker->randomElement(['to_do', 'in_progress']),
        ]);
    }

    /**
     * Indicate that the task is upcoming (due soon).
     */
    public function upcoming(): static
    {
        return $this->state(fn (array $attributes) => [
            'due_date' => $this->faker->dateTimeBetween('+1 hour', '+24 hours'),
            'status' => $this->faker->randomElement(['to_do', 'in_progress']),
        ]);
    }

    /**
     * Indicate that the task is auto-generated from a routine.
     */
    public function autoGenerated(): static
    {
        return $this->state(fn (array $attributes) => [
            'is_auto_generated' => true,
            'routine_id' => Routine::factory(),
            'generation_date' => $this->faker->dateTimeBetween('-1 week', 'now'),
            'target_date' => $this->faker->dateTimeBetween('now', '+1 week'),
        ]);
    }

    /**
     * Indicate that the task is assigned to another user.
     */
    public function assigned(): static
    {
        return $this->state(fn (array $attributes) => [
            'assigned_to' => User::factory(),
        ]);
    }

    /**
     * Indicate that the task has no due date.
     */
    public function noDueDate(): static
    {
        return $this->state(fn (array $attributes) => [
            'due_date' => null,
        ]);
    }

    /**
     * Indicate that the task has overdue notification sent.
     */
    public function overdueNotificationSent(): static
    {
        return $this->state(fn (array $attributes) => [
            'overdue_notification_sent' => true,
        ]);
    }

    /**
     * Create a task with specific due date.
     */
    public function dueAt(Carbon $dueDate): static
    {
        return $this->state(fn (array $attributes) => [
            'due_date' => $dueDate,
        ]);
    }

    /**
     * Create a task for a specific user.
     */
    public function forUser(User $user): static
    {
        return $this->state(fn (array $attributes) => [
            'user_id' => $user->id,
        ]);
    }

    /**
     * Create a task from a specific routine.
     */
    public function fromRoutine(Routine $routine): static
    {
        return $this->state(fn (array $attributes) => [
            'routine_id' => $routine->id,
            'is_auto_generated' => true,
            'generation_date' => now(),
            'target_date' => now(),
        ]);
    }
}
