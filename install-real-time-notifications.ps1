# Installation Script for Real-Time Notifications - Phase 3 (Windows PowerShell)
# SoNaMA IT Task Management System

Write-Host "üîî Installation du Syst√®me de Notifications en Temps R√©el - Phase 3" -ForegroundColor Cyan
Write-Host "=================================================================" -ForegroundColor Cyan

# Check if Laravel is installed
if (-not (Test-Path "artisan")) {
    Write-Host "‚ùå Erreur: Ce script doit √™tre ex√©cut√© dans le r√©pertoire racine de Laravel" -ForegroundColor Red
    exit 1
}

Write-Host "üì¶ V√©rification des d√©pendances..." -ForegroundColor Yellow

# Check if Pusher is already installed
$pusherInstalled = composer show | Select-String "pusher/pusher-php-server"
if ($pusherInstalled) {
    Write-Host "‚úÖ Pusher PHP SDK d√©j√† install√©" -ForegroundColor Green
} else {
    Write-Host "üì• Tentative d'installation de Pusher PHP SDK..." -ForegroundColor Yellow
    
    # Try different installation methods
    $installSuccess = $false
    
    # Method 1: Standard installation
    try {
        Write-Host "M√©thode 1: Installation standard..." -ForegroundColor Gray
        composer require pusher/pusher-php-server --no-interaction 2>$null
        if ($LASTEXITCODE -eq 0) {
            $installSuccess = $true
            Write-Host "‚úÖ Installation r√©ussie avec la m√©thode standard" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚ö†Ô∏è M√©thode 1 √©chou√©e" -ForegroundColor Yellow
    }
    
    # Method 2: With prefer-dist
    if (-not $installSuccess) {
        try {
            Write-Host "M√©thode 2: Installation avec prefer-dist..." -ForegroundColor Gray
            composer require pusher/pusher-php-server --prefer-dist --no-interaction 2>$null
            if ($LASTEXITCODE -eq 0) {
                $installSuccess = $true
                Write-Host "‚úÖ Installation r√©ussie avec prefer-dist" -ForegroundColor Green
            }
        } catch {
            Write-Host "‚ö†Ô∏è M√©thode 2 √©chou√©e" -ForegroundColor Yellow
        }
    }
    
    # Method 3: Update composer and retry
    if (-not $installSuccess) {
        try {
            Write-Host "M√©thode 3: Mise √† jour de Composer et nouvelle tentative..." -ForegroundColor Gray
            composer self-update 2>$null
            composer require pusher/pusher-php-server --no-interaction 2>$null
            if ($LASTEXITCODE -eq 0) {
                $installSuccess = $true
                Write-Host "‚úÖ Installation r√©ussie apr√®s mise √† jour de Composer" -ForegroundColor Green
            }
        } catch {
            Write-Host "‚ö†Ô∏è M√©thode 3 √©chou√©e" -ForegroundColor Yellow
        }
    }
    
    if (-not $installSuccess) {
        Write-Host "‚ö†Ô∏è Impossible d'installer Pusher automatiquement" -ForegroundColor Yellow
        Write-Host "üìù Mode de d√©veloppement activ√© avec service mock" -ForegroundColor Cyan
        Write-Host "   Vous pourrez installer Pusher plus tard avec:" -ForegroundColor Gray
        Write-Host "   composer require pusher/pusher-php-server" -ForegroundColor Gray
    }
}

# Check if broadcasting configuration exists
if (Test-Path "config/broadcasting.php") {
    Write-Host "‚úÖ Configuration broadcasting existante" -ForegroundColor Green
} else {
    Write-Host "üìù Configuration broadcasting cr√©√©e" -ForegroundColor Yellow
}

Write-Host "üîß Configuration des permissions..." -ForegroundColor Yellow

# Ensure directories exist and are writable (Windows equivalent)
if (-not (Test-Path "storage/logs")) {
    New-Item -ItemType Directory -Path "storage/logs" -Force | Out-Null
}

if (-not (Test-Path "bootstrap/cache")) {
    New-Item -ItemType Directory -Path "bootstrap/cache" -Force | Out-Null
}

Write-Host "üóÑÔ∏è Mise √† jour de la base de donn√©es..." -ForegroundColor Yellow

# Run migrations if needed
try {
    php artisan migrate --force 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Migrations ex√©cut√©es avec succ√®s" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors des migrations (peut √™tre normal si d√©j√† √† jour)" -ForegroundColor Yellow
}

Write-Host "üßπ Nettoyage du cache..." -ForegroundColor Yellow

# Clear caches
php artisan config:clear 2>$null
php artisan route:clear 2>$null
php artisan view:clear 2>$null
php artisan cache:clear 2>$null

Write-Host "üìã G√©n√©ration des caches optimis√©s..." -ForegroundColor Yellow

# Generate optimized caches
php artisan config:cache 2>$null
php artisan route:cache 2>$null

Write-Host ""
Write-Host "‚úÖ Installation termin√©e avec succ√®s !" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Prochaines √©tapes :" -ForegroundColor Cyan
Write-Host "1. Configurez vos cl√©s Pusher dans le fichier .env :" -ForegroundColor White
Write-Host "   BROADCAST_CONNECTION=pusher" -ForegroundColor Gray
Write-Host "   PUSHER_APP_ID=your-app-id" -ForegroundColor Gray
Write-Host "   PUSHER_APP_KEY=your-app-key" -ForegroundColor Gray
Write-Host "   PUSHER_APP_SECRET=your-app-secret" -ForegroundColor Gray
Write-Host "   PUSHER_APP_CLUSTER=your-cluster" -ForegroundColor Gray
Write-Host ""
Write-Host "2. Red√©marrez votre serveur web" -ForegroundColor White
Write-Host ""
Write-Host "3. Testez les notifications en temps r√©el en :" -ForegroundColor White
Write-Host "   - Cr√©ant une nouvelle t√¢che" -ForegroundColor Gray
Write-Host "   - Modifiant le statut d'une t√¢che existante" -ForegroundColor Gray
Write-Host "   - Observant les badges de notification" -ForegroundColor Gray
Write-Host ""
Write-Host "üìñ Documentation compl√®te : REAL_TIME_NOTIFICATIONS.md" -ForegroundColor Cyan
Write-Host ""

# Check network connectivity
Write-Host "üåê Test de connectivit√© r√©seau..." -ForegroundColor Yellow
try {
    $ping = Test-NetConnection -ComputerName "repo.packagist.org" -Port 443 -WarningAction SilentlyContinue
    if ($ping.TcpTestSucceeded) {
        Write-Host "‚úÖ Connexion √† Packagist OK" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Probl√®me de connexion √† Packagist d√©tect√©" -ForegroundColor Yellow
        Write-Host "   Verifiez votre connexion internet ou proxy d'entreprise" -ForegroundColor Gray
    }
} catch {
    Write-Host "‚ö†Ô∏è Impossible de tester la connectivit√©" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Le syst√®me de notifications en temps r√©el Phase 3 est pr√™t !" -ForegroundColor Green

# Pause to let user read the output
Write-Host ""
Write-Host "Appuyez sur une touche pour continuer..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
