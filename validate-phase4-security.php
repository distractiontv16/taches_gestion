<?php

require 'vendor/autoload.php';
$app = require 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

use App\Services\DataEncryptionService;
use App\Services\SecurityAuditService;
use App\Models\User;
use App\Models\Task;
use App\Models\Note;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Log;

echo "üîí VALIDATION COMPL√àTE DE LA PHASE 4 : S√âCURIT√â AVANC√âE\n";
echo "=====================================================\n\n";

$errors = [];
$warnings = [];
$successes = [];

// 1. Test du service de chiffrement
echo "üìã 1. VALIDATION DU SERVICE DE CHIFFREMENT\n";
echo "-------------------------------------------\n";

try {
    $encryptionService = new DataEncryptionService();
    
    // Test de chiffrement/d√©chiffrement basique
    $testData = "Donn√©es sensibles de test avec caract√®res sp√©ciaux: √†√©√®√π√ß @#$%";
    $encrypted = $encryptionService->encrypt($testData);
    $decrypted = $encryptionService->decrypt($encrypted);
    
    if ($testData === $decrypted) {
        $successes[] = "‚úÖ Chiffrement/d√©chiffrement basique fonctionne";
    } else {
        $errors[] = "‚ùå √âchec du chiffrement/d√©chiffrement basique";
    }
    
    // Test de validation des donn√©es chiffr√©es
    if ($encryptionService->validateEncryptedData($encrypted)) {
        $successes[] = "‚úÖ Validation des donn√©es chiffr√©es fonctionne";
    } else {
        $errors[] = "‚ùå √âchec de la validation des donn√©es chiffr√©es";
    }
    
    // Test des champs de mod√®le
    $taskData = [
        'title' => 'T√¢che de test',
        'description' => 'Description sensible',
        'status' => 'pending'
    ];
    
    $encryptedData = $encryptionService->encryptModelFields('Task', $taskData);
    $decryptedData = $encryptionService->decryptModelFields('Task', $encryptedData);
    
    if ($taskData['title'] === $decryptedData['title'] && 
        $taskData['description'] === $decryptedData['description']) {
        $successes[] = "‚úÖ Chiffrement des champs de mod√®le fonctionne";
    } else {
        $errors[] = "‚ùå √âchec du chiffrement des champs de mod√®le";
    }
    
} catch (Exception $e) {
    $errors[] = "‚ùå Erreur dans le service de chiffrement: " . $e->getMessage();
}

// 2. Test du service d'audit de s√©curit√©
echo "\nüìã 2. VALIDATION DU SERVICE D'AUDIT DE S√âCURIT√â\n";
echo "-----------------------------------------------\n";

try {
    $auditService = new SecurityAuditService();
    
    // Test de cr√©ation d'un log d'audit
    $request = Illuminate\Http\Request::create('/test', 'POST');
    $auditService->logLoginAttempt($request, true, 1);
    
    $successes[] = "‚úÖ Service d'audit de s√©curit√© initialis√©";
    
    // Test d'analyse des patterns suspects
    $patterns = $auditService->analyzeSuspiciousPatterns();
    if (is_array($patterns)) {
        $successes[] = "‚úÖ Analyse des patterns suspects fonctionne";
    } else {
        $warnings[] = "‚ö†Ô∏è  Analyse des patterns suspects retourne un format inattendu";
    }
    
} catch (Exception $e) {
    $errors[] = "‚ùå Erreur dans le service d'audit: " . $e->getMessage();
}

// 3. Validation de la configuration de s√©curit√©
echo "\nüìã 3. VALIDATION DE LA CONFIGURATION DE S√âCURIT√â\n";
echo "------------------------------------------------\n";

// V√©rifier la configuration de chiffrement
$encryptionConfig = Config::get('security.encryption');
if ($encryptionConfig && isset($encryptionConfig['algorithm'])) {
    $successes[] = "‚úÖ Configuration de chiffrement pr√©sente";
    
    if ($encryptionConfig['algorithm'] === 'AES-256-GCM') {
        $successes[] = "‚úÖ Algorithme de chiffrement AES-256-GCM configur√©";
    } else {
        $warnings[] = "‚ö†Ô∏è  Algorithme de chiffrement non optimal: " . $encryptionConfig['algorithm'];
    }
} else {
    $errors[] = "‚ùå Configuration de chiffrement manquante";
}

// V√©rifier la configuration CSRF
$csrfConfig = Config::get('security.csrf');
if ($csrfConfig && $csrfConfig['double_submit_enabled']) {
    $successes[] = "‚úÖ Protection CSRF double-submit activ√©e";
} else {
    $warnings[] = "‚ö†Ô∏è  Protection CSRF double-submit d√©sactiv√©e";
}

// V√©rifier les headers de s√©curit√©
$headersConfig = Config::get('security.headers');
if ($headersConfig && isset($headersConfig['X-Frame-Options'])) {
    $successes[] = "‚úÖ Headers de s√©curit√© configur√©s";
    
    if ($headersConfig['X-Frame-Options'] === 'DENY') {
        $successes[] = "‚úÖ Protection contre le clickjacking activ√©e";
    }
} else {
    $errors[] = "‚ùå Headers de s√©curit√© non configur√©s";
}

// 4. Test des mod√®les avec chiffrement
echo "\nüìã 4. VALIDATION DES MOD√àLES AVEC CHIFFREMENT\n";
echo "---------------------------------------------\n";

try {
    // V√©rifier que les mod√®les utilisent le trait EncryptableFields
    $modelsToCheck = [
        'App\Models\User',
        'App\Models\Task', 
        'App\Models\Note',
        'App\Models\Routine',
        'App\Models\Reminder'
    ];
    
    foreach ($modelsToCheck as $modelClass) {
        $reflection = new ReflectionClass($modelClass);
        $traits = $reflection->getTraitNames();
        
        if (in_array('App\Traits\EncryptableFields', $traits)) {
            $successes[] = "‚úÖ " . class_basename($modelClass) . " utilise le trait EncryptableFields";
        } else {
            $errors[] = "‚ùå " . class_basename($modelClass) . " n'utilise pas le trait EncryptableFields";
        }
    }
    
} catch (Exception $e) {
    $errors[] = "‚ùå Erreur lors de la v√©rification des mod√®les: " . $e->getMessage();
}

// 5. Test des middleware de s√©curit√©
echo "\nüìã 5. VALIDATION DES MIDDLEWARE DE S√âCURIT√â\n";
echo "-------------------------------------------\n";

// V√©rifier l'existence des middleware
$middlewareFiles = [
    'app/Http/Middleware/VerifyCsrfToken.php',
    'app/Http/Middleware/SecurityHeadersMiddleware.php',
    'app/Http/Middleware/SecurityAuditMiddleware.php',
    'app/Http/Middleware/EnhancedRateLimitMiddleware.php'
];

foreach ($middlewareFiles as $file) {
    if (file_exists($file)) {
        $successes[] = "‚úÖ Middleware " . basename($file, '.php') . " pr√©sent";
    } else {
        $errors[] = "‚ùå Middleware " . basename($file, '.php') . " manquant";
    }
}

// 6. Validation de la configuration de session
echo "\nüìã 6. VALIDATION DE LA CONFIGURATION DE SESSION\n";
echo "-----------------------------------------------\n";

$sessionEncrypt = Config::get('session.encrypt');
if ($sessionEncrypt) {
    $successes[] = "‚úÖ Chiffrement des sessions activ√©";
} else {
    $warnings[] = "‚ö†Ô∏è  Chiffrement des sessions d√©sactiv√©";
}

$sessionSameSite = Config::get('session.same_site');
if ($sessionSameSite === 'strict') {
    $successes[] = "‚úÖ Attribut SameSite strict configur√©";
} else {
    $warnings[] = "‚ö†Ô∏è  Attribut SameSite non optimal: " . $sessionSameSite;
}

// 7. Test des commandes de s√©curit√©
echo "\nüìã 7. VALIDATION DES COMMANDES DE S√âCURIT√â\n";
echo "------------------------------------------\n";

if (file_exists('app/Console/Commands/SecurityAuditCommand.php')) {
    $successes[] = "‚úÖ Commande d'audit de s√©curit√© pr√©sente";
} else {
    $errors[] = "‚ùå Commande d'audit de s√©curit√© manquante";
}

// 8. R√©sum√© final
echo "\n" . str_repeat("=", 60) . "\n";
echo "üìä R√âSUM√â DE LA VALIDATION\n";
echo str_repeat("=", 60) . "\n";

echo "\n‚úÖ SUCC√àS (" . count($successes) . "):\n";
foreach ($successes as $success) {
    echo "  " . $success . "\n";
}

if (!empty($warnings)) {
    echo "\n‚ö†Ô∏è  AVERTISSEMENTS (" . count($warnings) . "):\n";
    foreach ($warnings as $warning) {
        echo "  " . $warning . "\n";
    }
}

if (!empty($errors)) {
    echo "\n‚ùå ERREURS (" . count($errors) . "):\n";
    foreach ($errors as $error) {
        echo "  " . $error . "\n";
    }
}

echo "\n" . str_repeat("=", 60) . "\n";

if (empty($errors)) {
    echo "üéâ PHASE 4 : S√âCURIT√â AVANC√âE VALID√âE AVEC SUCC√àS!\n";
    echo "Toutes les fonctionnalit√©s de s√©curit√© sont op√©rationnelles.\n";
} else {
    echo "‚ö†Ô∏è  PHASE 4 : VALIDATION INCOMPL√àTE\n";
    echo "Veuillez corriger les erreurs avant de continuer.\n";
}

echo "\nüìù PROCHAINES √âTAPES RECOMMAND√âES:\n";
echo "- Ex√©cuter les tests unitaires: php artisan test\n";
echo "- Lancer l'audit de s√©curit√©: php artisan security:audit --full\n";
echo "- V√©rifier les logs de s√©curit√©: tail -f storage/logs/security.log\n";
echo "- Configurer la rotation des cl√©s de chiffrement\n";
echo "- Mettre en place la surveillance des alertes de s√©curit√©\n";

echo "\nüîí Phase 4 : S√©curit√© Avanc√©e - Validation termin√©e!\n";
